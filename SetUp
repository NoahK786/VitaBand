VitaBand - Project File Structure & Setup Guide

ðŸ“Œ Overview

This document provides a step-by-step guide on how to set up VitaBand using GitHub, Replit AI, and manual coding. It includes:

Project file structure

Downloading & installing dependencies

Where to place files

ESP32 firmware setup

Flask API & database integration

GitHub repository setup

Replit integration

ðŸ“‚ Project File Structure

Your project should be structured as follows:

VitaBand/
â”‚â”€â”€ firmware/                  # ESP32 Firmware Code
â”‚   â”œâ”€â”€ firmware.ino            # Main ESP32 Microcontroller Code
â”‚   â”œâ”€â”€ config.json             # Configuration settings for sensors
â”‚â”€â”€ app/                        # Python-Based App
â”‚   â”œâ”€â”€ app.py                  # Flask API & Sensor Data Processing
â”‚   â”œâ”€â”€ database.sqlite         # SQLite Database for Stress Data
â”‚   â”œâ”€â”€ visualization.py        # Graphing & Analytics for Stress Data
â”‚â”€â”€ 3d_designs/                  # 3D Print Models for the Wristband
â”‚   â”œâ”€â”€ vitaband_v1.stl         # First 3D Model Version
â”‚â”€â”€ docs/                        # Documentation & Setup Guides
â”‚   â”œâ”€â”€ README.md               # Project Overview & Instructions
â”‚   â”œâ”€â”€ VitaBand_Project.pdf    # Full Technical Document
â”‚â”€â”€ requirements.txt            # Python Dependencies for Installation
â”‚â”€â”€ main.py                     # Entry Script to Start the Project
â”‚â”€â”€ .gitignore                   # Ignore Unnecessary Files

ðŸš€ Step 1: Setting Up GitHub

ðŸ”¹ 1. Create a GitHub Repository

Go to GitHub â†’ Click New Repository.

Name it: VitaBand

Visibility: Public

Initialize with:
âœ… Add README.md
âœ… Add .gitignore â†’ Select Python
âœ… Add MIT License

Click "Create Repository"

ðŸ”¹ 2. Clone Your Repository Locally

Run the following commands in Terminal/Git Bash:

git clone https://github.com/YOUR-USERNAME/VitaBand.git
cd VitaBand

ðŸ”¹ 3. Add Project Files to GitHub

Move all project files into your VitaBand/ folder.
Then run:

git add .
git commit -m "Initial VitaBand setup"
git push origin main

âœ… Your project files are now on GitHub!

ðŸš€ Step 2: Setting Up Replit

ðŸ”¹ 1. Import Repository to Replit

Go to Replit â†’ Create Repl

Select "Import from GitHub"

Enter https://github.com/YOUR-USERNAME/VitaBand.git

Click Import

ðŸ”¹ 2. Install Dependencies

Run the following command inside Replitâ€™s terminal:

pip install -r requirements.txt

ðŸ”¹ 3. Run Flask API

python app.py

âœ… Now your API is running on Replit!

ðŸš€ Step 3: Setting Up ESP32 Firmware

ðŸ”¹ 1. Install Arduino IDE & Required Libraries

Download & install Arduino IDE. Then install the following libraries:

ESP32 Board Package

Adafruit Sensor Library

Wire.h

ðŸ”¹ 2. Upload Firmware to ESP32

Connect ESP32 to your computer via USB.

Open firmware.ino in Arduino IDE.

Select ESP32 Board Type.

Click Upload.

âœ… Now your ESP32 is ready to collect stress data!

ðŸ“œ Code: Firmware (ESP32)

#include <Wire.h>
#include <Adafruit_Sensor.h>

#define HRV_PIN 32
#define EDA_PIN 33
#define TEMP_PIN 34
#define LED_PIN 5

void setup() {
    pinMode(LED_PIN, OUTPUT);
    Serial.begin(115200);
}

void loop() {
    int HRV = analogRead(HRV_PIN);
    int EDA = analogRead(EDA_PIN);
    int TEMP = analogRead(TEMP_PIN);
    
    if (HRV < 50 && EDA > 300 && TEMP > 90) {
        digitalWrite(LED_PIN, HIGH);
        Serial.println("Stress Detected!");
    } else {
        digitalWrite(LED_PIN, LOW);
    }
    
    delay(1000);
}

ðŸ“œ Code: Flask API (app.py)

from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def init_db():
    conn = sqlite3.connect("database.sqlite")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS stress_data (
                 timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                 HRV INT, EDA INT, Temp INT, Stress_Level TEXT)''')
    conn.commit()
    conn.close()

@app.route('/stress', methods=['POST'])
def receive_data():
    data = request.json
    HRV, EDA, Temp = data["HRV"], data["EDA"], data["Temp"]
    stress_level = "High" if (HRV < 50 and EDA > 300 and Temp > 90) else "Normal"
    
    conn = sqlite3.connect("database.sqlite")
    c = conn.cursor()
    c.execute("INSERT INTO stress_data (HRV, EDA, Temp, Stress_Level) VALUES (?, ?, ?, ?)",
              (HRV, EDA, Temp, stress_level))
    conn.commit()
    conn.close()
    
    return jsonify({"status": "Data Stored", "Stress_Level": stress_level})

if __name__ == '__main__':
    init_db()
    app.run(debug=True, port=5000)

ðŸ“œ Code: Data Visualization (visualization.py)

import matplotlib.pyplot as plt
import numpy as np
import sqlite3

conn = sqlite3.connect("database.sqlite")
c = conn.cursor()
c.execute("SELECT timestamp, HRV FROM stress_data")
data = c.fetchall()
conn.close()

timestamps = [x[0] for x in data]
stress_values = [x[1] for x in data]

z = np.polyfit(range(len(stress_values)), stress_values, 1)
p = np.poly1d(z)

plt.scatter(range(len(stress_values)), stress_values, label="Stress Levels")
plt.plot(range(len(stress_values)), p(range(len(stress_values))), color="red", label="Trend Line")
plt.xlabel("Time")
plt.ylabel("Stress Level")
plt.legend()
plt.show()

ðŸš€ Final Steps

âœ… Test ESP32 sensor integration
âœ… Run Flask API & database
âœ… Deploy to GitHub & Replit
âœ… Refine app UI & submit project
